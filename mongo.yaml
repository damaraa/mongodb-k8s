---
apiVersion: v1
kind: Service
metadata:
  name: mongo
  labels:
    name: mongo
spec:
  ports:
  - name: mongo
    port: 27017
    targetPort: 27017
  clusterIP: None
  selector:
    role: mongo
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: mongo
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: read-pod-service-endpoint
rules:
  - apiGroups:
      - ""
    resources:
      - pods
      - services
      - endpoints
    verbs:
      - get
      - list
      - watch
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: system:serviceaccount:default:mongo
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: read-pod-service-endpoint
subjects:
  - kind: ServiceAccount
    name: mongo
    namespace: default
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongo
spec:
  selector:
    matchLabels:
      role: mongo
      environment: test
  serviceName: "mongo"
  replicas: 3
  template:
    metadata:
      labels:
        role: mongo
        environment: test
    spec:
      terminationGracePeriodSeconds: 10
      serviceAccountName: mongo
      automountServiceAccountToken: true
      containers:
      - name: mongo
        image: mongo
        command:
          - mongod
        args:
          - "--bind_ip_all"
          - "--replSet=rs0"
          - "--port=27017"
        ports:
        - containerPort: 27017
        volumeMounts:
        - name: mongo-volume-claim
          mountPath: /data/db
      - name: mongo-sidecar
        image: morphy/k8s-mongo-sidecar
        env:
          - name: KUBERNETES_POD_LABELS
            value: "role=mongo,environment=test"
          - name: KUBERNETES_SERVICE_NAME
            value: "mongo"
  volumeClaimTemplates:
    - metadata:
        name: mongo-volume-claim
      spec:
        storageClassName: managed-nfs-storage
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 500Gi